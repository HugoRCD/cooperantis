generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPassword {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            Int     @id @default(autoincrement())
  name          String
  userId        Int
  stripeId      String  @unique
  stripeStatus  String?
  stripePriceId String?
  trialEndsAt   Int?
  endsAt        Int?
  startDate     Int
  lastEventDate Int
  User          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                Int                 @id @default(autoincrement())
  loginType         String?             @default("email")
  username          String              @unique
  bio               String?
  email             String              @unique
  phone             String              @unique
  firstname         String
  lastname          String
  country           String
  address           String
  city              String
  postalCode        String
  website           String?
  company           String?
  profession        String
  password          String
  stripeCustomerId  String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  role              Int                 @default(1)
  isVerified        Boolean             @default(false)
  refreshToken      String?             @unique
  authToken         String?             @unique
  avatar            String              @default("https://storage.cloud.google.com/cooperantis/default-avatar.jpeg")
  Comment           Comment[]
  EmailVerification EmailVerification[]
  Like              Like[]
  Post              Post[]
  ResetPassword     ResetPassword[]
  Subscription      Subscription[]
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  userId    Int
  Comment   Comment[]
  Like      Like[]
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Like      Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  commentId Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
